/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    NetAdapterPacket.h

Abstract:

    Wrapper functions to access NET_PACKETs from a NET_RING_BUFFER

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETADAPTERPACKET_H_
#define _NETADAPTERPACKET_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START




typedef PCWDF_OBJECT_CONTEXT_TYPE_INFO PCNET_CONTEXT_TYPE_INFO;
typedef struct NET_PACKET_CONTEXT_TOKEN *PNET_PACKET_CONTEXT_TOKEN;

typedef struct _NET_PACKET_CONTEXT_ATTRIBUTES *PNET_PACKET_CONTEXT_ATTRIBUTES;
typedef struct _NET_PACKET_CONTEXT_ATTRIBUTES
{
    //
    // Size of structure
    //
    ULONG Size;

    //
    // If not zero, context size to use when allocating
    // packet context
    //
    size_t ContextSizeOverride;

    //
    // Context type info
    //
    PCNET_CONTEXT_TYPE_INFO ContextTypeInfo;

} NET_PACKET_CONTEXT_ATTRIBUTES, *PNET_PACKET_CONTEXT_ATTRIBUTES;

#define NET_PACKET_CONTEXT_ATTRIBUTES_INIT_TYPE(_packetcontextattributes, _contexttype)     \
    RtlZeroMemory((_packetcontextattributes), sizeof(NET_PACKET_CONTEXT_ATTRIBUTES));       \
    (_packetcontextattributes)->Size = sizeof(NET_PACKET_CONTEXT_ATTRIBUTES);               \
    (_packetcontextattributes)->ContextTypeInfo = WDF_GET_CONTEXT_TYPE_INFO(_contexttype);  \

#define NET_PACKET_DECLARE_CASTING_FUNCTION(_contexttype, _castingfunction)     \
                                                                                \
WDF_EXTERN_C                                                                    \
__drv_aliasesMem                                                                \
WDF_TYPE_NAME_POINTER_TYPE(_contexttype)                                        \
FORCEINLINE                                                                     \
_castingfunction(                                                               \
   _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor,                           \
   _In_ NET_PACKET* NetPacket                                                   \
   )                                                                            \
{                                                                               \
    return (WDF_TYPE_NAME_POINTER_TYPE(_contexttype))                           \
        NetPacketGetTypedContext(                                               \
            Descriptor,                                                      \
            NetPacket,                                                          \
            WDF_GET_CONTEXT_TYPE_INFO(_contexttype)->UniqueType                 \
            );                                                                  \
}                                                                               \

#define NET_PACKET_DECLARE_CASTING_FUNCTION_FROM_TOKEN(_contexttype, _castingfunction)      \
                                                                                            \
WDF_EXTERN_C                                                                                \
__drv_aliasesMem                                                                            \
WDF_TYPE_NAME_POINTER_TYPE(_contexttype)                                                    \
FORCEINLINE                                                                                 \
_castingfunction##FromToken(                                                                \
   _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor,                                       \
   _In_ NET_PACKET* NetPacket,                                                              \
   _In_ PNET_PACKET_CONTEXT_TOKEN Token                                                     \
   )                                                                                        \
{                                                                                           \
    return (WDF_TYPE_NAME_POINTER_TYPE(_contexttype))                                       \
        NetPacketGetContextFromToken(                                                       \
            Descriptor,                                                                  \
            NetPacket,                                                                      \
            Token                                                                           \
            );                                                                              \
}                                                                                           \


#define NET_PACKET_DECLARE_CONTEXT_TYPE_WITH_NAME(_contexttype, _castingfunction)   \
                                                                                    \
WDF_DECLARE_TYPE_AND_GLOBALS(                                                       \
    _contexttype,                                                                   \
    WDF_GET_CONTEXT_TYPE_INFO(_contexttype),                                        \
    NULL,                                                                           \
    WDF_TYPE_DEFAULT_SECTION_NAME)                                                  \
                                                                                    \
NET_PACKET_DECLARE_CASTING_FUNCTION(_contexttype, _castingfunction)                 \
NET_PACKET_DECLARE_CASTING_FUNCTION_FROM_TOKEN(_contexttype, _castingfunction)      \

__inline
NET_PACKET*
NetRingBufferGetPacketAtIndex(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor,
    _In_ UINT32 Index
    )
{
    return (NET_PACKET*)NetRingBufferGetElementAtIndex(NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor), Index);
}

__inline
NET_PACKET*
NetRingBufferGetNextPacket(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor
    )
{
    UINT32 NextIndex = NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->NextIndex;

    if (NextIndex == NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->EndIndex)
        return NULL;

    return NetRingBufferGetPacketAtIndex(Descriptor, NextIndex);
}

__inline
NET_PACKET*
NetRingBufferAdvanceNextPacket(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor
    )
{
    UINT32 NextIndex = NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->NextIndex;

    if (NextIndex == NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->EndIndex)
        return NULL;

    NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->NextIndex =
        NetRingBufferIncrementIndex(NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor), NextIndex);

    return NetRingBufferGetPacketAtIndex(Descriptor, NextIndex);
}

__inline
VOID
NetRingBufferReturnAllPackets(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor
)
{
    UINT32 i;
    NET_RING_BUFFER * RingBuffer = NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor);
    RingBuffer->NextIndex = RingBuffer->EndIndex;

    for (i = RingBuffer->BeginIndex; i != RingBuffer->EndIndex; i = NetRingBufferIncrementIndex(RingBuffer, i))
    {
        NET_PACKET *packet = NetRingBufferGetPacketAtIndex(Descriptor, i);
        packet->IgnoreThisPacket = 1;
    }

    RingBuffer->BeginIndex = RingBuffer->EndIndex;
}

__inline
VOID
NetRingBufferReturnCompletedPacketsThroughIndex(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor,
    _In_ UINT32 EndIndex,
    _In_ UINT32 BatchSize
    )
{
    UINT32 i;
    UINT32 j = 0;
    NET_RING_BUFFER* packetRingBuffer = NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor);
    for (i = packetRingBuffer->BeginIndex; i != EndIndex; i = NetRingBufferIncrementIndex(packetRingBuffer, i))
    {
        NET_PACKET *packet = NetRingBufferGetPacketAtIndex(Descriptor, i);

        if (! packet->Completed)
        {
            break;
        }

        j++;
    }

    if (j >= BatchSize)
    {
        packetRingBuffer->BeginIndex = i;
    }
}

__inline
VOID
NetRingBufferReturnCompletedPackets(
    _In_ NET_DATAPATH_DESCRIPTOR const* Descriptor,
    _In_ UINT32 BatchSize
    )
{
    NetRingBufferReturnCompletedPacketsThroughIndex(Descriptor, NET_DATAPATH_DESCRIPTOR_GET_PACKET_RING_BUFFER(Descriptor)->NextIndex, BatchSize);
}

//
// The structure that contains packet extension info
// on an adapter or a queue
//
typedef struct _NET_PACKET_EXTENSION
{
    // Structure fields
    ULONG Size;

    // Extension info fields
    PCWSTR Name;
    ULONG Version;
    ULONG Alignment;
    size_t ExtensionSize;
} NET_PACKET_EXTENSION, *PNET_PACKET_EXTENSION;

FORCEINLINE
VOID
NET_PACKET_EXTENSION_INIT(
    _Out_ PNET_PACKET_EXTENSION Extension,
    _In_ PCWSTR Name,
    _In_ ULONG Version,
    _In_ size_t ExtensionSize,
    _In_ ULONG Alignment
    )
{
    RtlZeroMemory(Extension, sizeof(NET_PACKET_EXTENSION));
    Extension->Size = sizeof(NET_PACKET_EXTENSION);

    Extension->Name = Name;
    Extension->Version = Version;
    Extension->Alignment = Alignment;
    Extension->ExtensionSize = ExtensionSize;
}

//
// The structure is similar to NET_PACKET_EXTENSION
// but for query.
//
typedef struct _NET_PACKET_EXTENSION_QUERY
{
    // Structure fields
    ULONG Size;

    // Extension info fields
    PCWSTR Name;
    ULONG Version;
} NET_PACKET_EXTENSION_QUERY, *PNET_PACKET_EXTENSION_QUERY;

FORCEINLINE
VOID
NET_PACKET_EXTENSION_QUERY_INIT(
    _Out_ PNET_PACKET_EXTENSION_QUERY Extension,
    _In_ PCWSTR Name,
    _In_ ULONG Version
    )
{
    RtlZeroMemory(Extension, sizeof(NET_PACKET_EXTENSION_QUERY));
    Extension->Size = sizeof(NET_PACKET_EXTENSION_QUERY);

    Extension->Name = Name;
    Extension->Version = Version;
}

//
// NET Function: NetPacketGetTypedContext
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
PVOID
(*PFN_NETPACKETGETTYPEDCONTEXT)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    PCNET_DATAPATH_DESCRIPTOR Descriptor,
    _In_
    NET_PACKET* NetPacket,
    _In_
    PCNET_CONTEXT_TYPE_INFO TypeInfo
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
PVOID
FORCEINLINE
NetPacketGetTypedContext(
    _In_
    PCNET_DATAPATH_DESCRIPTOR Descriptor,
    _In_
    NET_PACKET* NetPacket,
    _In_
    PCNET_CONTEXT_TYPE_INFO TypeInfo
    )
{
    return ((PFN_NETPACKETGETTYPEDCONTEXT) NetFunctions[NetPacketGetTypedContextTableIndex])(NetDriverGlobals, Descriptor, NetPacket, TypeInfo);
}

//
// NET Function: NetPacketGetContextFromToken
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
PVOID
(*PFN_NETPACKETGETCONTEXTFROMTOKEN)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    PCNET_DATAPATH_DESCRIPTOR Descriptor,
    _In_
    NET_PACKET* NetPacket,
    _In_
    PNET_PACKET_CONTEXT_TOKEN Token
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
PVOID
FORCEINLINE
NetPacketGetContextFromToken(
    _In_
    PCNET_DATAPATH_DESCRIPTOR Descriptor,
    _In_
    NET_PACKET* NetPacket,
    _In_
    PNET_PACKET_CONTEXT_TOKEN Token
    )
{
    return ((PFN_NETPACKETGETCONTEXTFROMTOKEN) NetFunctions[NetPacketGetContextFromTokenTableIndex])(NetDriverGlobals, Descriptor, NetPacket, Token);
}



WDF_EXTERN_C_END

#endif // _NETADAPTERPACKET_H_

