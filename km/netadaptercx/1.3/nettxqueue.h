/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    NetTxQueue.h

Abstract:

    This is the interfaces for the NetTxQueue

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETTXQUEUE_H_
#define _NETTXQUEUE_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START




#include <NetPacketQueue.h>

typedef struct NETTXQUEUE_INIT *PNETTXQUEUE_INIT;

//
// NET Function: NetTxQueueCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETTXQUEUECREATE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES TxQueueAttributes,
    _In_
    PNET_PACKET_QUEUE_CONFIG Configuration,
    _Out_
    NETPACKETQUEUE* TxQueue
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetTxQueueCreate(
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES TxQueueAttributes,
    _In_
    PNET_PACKET_QUEUE_CONFIG Configuration,
    _Out_
    NETPACKETQUEUE* TxQueue
    )
{
    return ((PFN_NETTXQUEUECREATE) NetFunctions[NetTxQueueCreateTableIndex])(NetDriverGlobals, NetTxQueueInit, TxQueueAttributes, Configuration, TxQueue);
}

//
// NET Function: NetTxQueueNotifyMoreCompletedPacketsAvailable
//
typedef
_IRQL_requires_max_(HIGH_LEVEL)
WDFAPI
VOID
(*PFN_NETTXQUEUENOTIFYMORECOMPLETEDPACKETSAVAILABLE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETPACKETQUEUE TxQueue
    );

_IRQL_requires_max_(HIGH_LEVEL)
VOID
FORCEINLINE
NetTxQueueNotifyMoreCompletedPacketsAvailable(
    _In_
    NETPACKETQUEUE TxQueue
    )
{
    ((PFN_NETTXQUEUENOTIFYMORECOMPLETEDPACKETSAVAILABLE) NetFunctions[NetTxQueueNotifyMoreCompletedPacketsAvailableTableIndex])(NetDriverGlobals, TxQueue);
}

//
// NET Function: NetTxQueueInitGetQueueId
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
ULONG
(*PFN_NETTXQUEUEINITGETQUEUEID)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    PNETTXQUEUE_INIT NetTxQueueInit
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
ULONG
FORCEINLINE
NetTxQueueInitGetQueueId(
    _In_
    PNETTXQUEUE_INIT NetTxQueueInit
    )
{
    return ((PFN_NETTXQUEUEINITGETQUEUEID) NetFunctions[NetTxQueueInitGetQueueIdTableIndex])(NetDriverGlobals, NetTxQueueInit);
}

//
// NET Function: NetTxQueueGetDatapathDescriptor
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
PCNET_DATAPATH_DESCRIPTOR
(*PFN_NETTXQUEUEGETDATAPATHDESCRIPTOR)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETPACKETQUEUE NetTxQueue
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
PCNET_DATAPATH_DESCRIPTOR
FORCEINLINE
NetTxQueueGetDatapathDescriptor(
    _In_
    NETPACKETQUEUE NetTxQueue
    )
{
    return ((PFN_NETTXQUEUEGETDATAPATHDESCRIPTOR) NetFunctions[NetTxQueueGetDatapathDescriptorTableIndex])(NetDriverGlobals, NetTxQueue);
}

//
// NET Function: NetTxQueueGetPacketContextToken
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
PNET_PACKET_CONTEXT_TOKEN
(*PFN_NETTXQUEUEGETPACKETCONTEXTTOKEN)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETPACKETQUEUE NetTxQueue,
    _In_
    PCNET_CONTEXT_TYPE_INFO ContextTypeInfo
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
PNET_PACKET_CONTEXT_TOKEN
FORCEINLINE
NetTxQueueGetPacketContextToken(
    _In_
    NETPACKETQUEUE NetTxQueue,
    _In_
    PCNET_CONTEXT_TYPE_INFO ContextTypeInfo
    )
{
    return ((PFN_NETTXQUEUEGETPACKETCONTEXTTOKEN) NetFunctions[NetTxQueueGetPacketContextTokenTableIndex])(NetDriverGlobals, NetTxQueue, ContextTypeInfo);
}

//
// NET Function: NetTxQueueInitAddPacketContextAttributes
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETTXQUEUEINITADDPACKETCONTEXTATTRIBUTES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_
    PNET_PACKET_CONTEXT_ATTRIBUTES PacketContextAttributes
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetTxQueueInitAddPacketContextAttributes(
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_
    PNET_PACKET_CONTEXT_ATTRIBUTES PacketContextAttributes
    )
{
    return ((PFN_NETTXQUEUEINITADDPACKETCONTEXTATTRIBUTES) NetFunctions[NetTxQueueInitAddPacketContextAttributesTableIndex])(NetDriverGlobals, NetTxQueueInit, PacketContextAttributes);
}

//
// NET Function: NetTxQueueGetPacketExtensionOffset
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
SIZE_T
(*PFN_NETTXQUEUEGETPACKETEXTENSIONOFFSET)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETPACKETQUEUE NetTxQueue,
    _In_
    CONST PNET_PACKET_EXTENSION_QUERY ExtensionToGet
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
SIZE_T
FORCEINLINE
NetTxQueueGetPacketExtensionOffset(
    _In_
    NETPACKETQUEUE NetTxQueue,
    _In_
    CONST PNET_PACKET_EXTENSION_QUERY ExtensionToGet
    )
{
    return ((PFN_NETTXQUEUEGETPACKETEXTENSIONOFFSET) NetFunctions[NetTxQueueGetPacketExtensionOffsetTableIndex])(NetDriverGlobals, NetTxQueue, ExtensionToGet);
}




WDF_EXTERN_C_END

#endif // _NETTXQUEUE_H_

